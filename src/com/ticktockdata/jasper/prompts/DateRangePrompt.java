/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ticktockdata.jasper.prompts;

import com.ticktockdata.jasper.JasperReportImpl;
import java.util.*;
import net.sf.jasperreports.engine.JRExpression;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JRPropertiesHolder;
import net.sf.jasperreports.engine.JRPropertiesMap;
import net.sf.jasperreports.engine.type.ParameterEvaluationTimeEnum;

/**
 *
 * @author default
 */
public class DateRangePrompt extends PromptComponent<List<Date>> implements JRParameter {

    private String startDateParameterName;
    private String endDateParameterName;
    private Date startDate;
    private Date endDate;
    private RangeName rangeName;
    private RangeName oldRange; // the Range to use for 'old value' of Property Change event

    private boolean triggerCustom = true;
    private boolean supressTrigger = false;

    public enum RangeName {
        ALL("All"),
        TODAY("Today"),
        THIS_WEEK("This Week"),
        THIS_WEEK_TO_DATE("This Week To Date"),
        THIS_MONTH("This Month"),
        THIS_MONTH_TO_DATE("This Month To Date"),
        THIS_QUARTER("This Quarter"),
        THIS_QUARTER_TO_DATE("This Quarter To Date"),
        THIS_YEAR("This Year"),
        THIS_YEAR_TO_DATE("This Year To Date"),
        YESTERDAY("Yesterday"),
        LAST_WEEK("Last Week"),
        LAST_WEEK_TO_DATE("Last Week To Date"),
        LAST_MONTH("Last Month"),
        LAST_MONTH_TO_DATE("Last Month To Date"),
        LAST_QUARTER("Last Quarter"),
        LAST_QUARTER_TO_DATE("Last Quarter To Date"),
        LAST_YEAR("Last Year"),
        LAST_YEAR_TO_DATE("Last Year To Date"),
        CUSTOM("** Custom **");

        private String prettyName;

        RangeName(String prettyName) {
            this.prettyName = prettyName;
        }

        @Override
        public String toString() {
            return prettyName;
        }

    }

    /**
     * Creates new form DateRangePrompt
     */
    public DateRangePrompt() {
        initComponents();
        for (RangeName rn : rangeName.values()) {
            cboRange.addItem(rn);
        }
        
        if (getDescription().isEmpty()) {
            // this parameter has a pre-defined description
            super.setDescription("Select Date Range");
        } else {
            this.setDescription(getDescription());
        }
        
        cboRange.setSelectedItem(RangeName.THIS_MONTH);
        oldRange = (RangeName) cboRange.getSelectedItem();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDescription = new javax.swing.JLabel();
        cboRange = new javax.swing.JComboBox<RangeName>();
        dateStart = new classicacctapp.ClassicAccDatePicker();
        lblTo = new javax.swing.JLabel();
        dateEnd = new classicacctapp.ClassicAccDatePicker();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDescription.setText("Select Date Range");

        cboRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboRangeItemStateChanged(evt);
            }
        });

        dateStart.setFont(dateStart.getFont().deriveFont(dateStart.getFont().getSize()-1f));
        dateStart.setFormats("MM/dd/yy");
        dateStart.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateStartPropertyChange(evt);
            }
        });

        lblTo.setText("To");

        dateEnd.setFont(dateEnd.getFont().deriveFont(dateEnd.getFont().getSize()-1f));
        dateEnd.setFormats("MM/dd/yy");
        dateEnd.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateEndPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(lblTo)
                        .addGap(3, 3, 3)
                        .addComponent(dateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(cboRange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblDescription)
                .addGap(3, 3, 3)
                .addComponent(cboRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTo)
                    .addComponent(dateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboRangeItemStateChanged
        
        // create an 'old value' DateRange (added PropertyChange event 9/5/19)
        DateRange oldVal = new DateRange(oldRange, startDate, endDate);

        // this upates the dates
        setRangeName((RangeName) cboRange.getSelectedItem());

        // now create a new value and fire property change
        DateRange newVal = new DateRange((RangeName) cboRange.getSelectedItem(), getStartDate(), getEndDate());
        firePropertyChange("DATE_RANGE", oldVal, newVal);
        // reset the Range to new value for next update
        oldRange = (RangeName) cboRange.getSelectedItem();

    }//GEN-LAST:event_cboRangeItemStateChanged

    private void dateStartPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateStartPropertyChange

        if (supressTrigger) {
            return;
        }
        if (evt.getPropertyName().equalsIgnoreCase("date")) {

            // create an 'old value' DateRange (added PropertyChange event 9/5/19)
            DateRange oldVal = new DateRange(oldRange, startDate, endDate);

            // update the date / date range
            setStartDate(dateStart.getDate());

            // now create a new value and fire property change
            DateRange newVal = new DateRange((RangeName) cboRange.getSelectedItem(), getStartDate(), getEndDate());
            firePropertyChange("DATE_RANGE", oldVal, newVal);
            // reset the Range to new value for next update
            oldRange = (RangeName) cboRange.getSelectedItem();
        }

    }//GEN-LAST:event_dateStartPropertyChange

    private void dateEndPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateEndPropertyChange
        
        if (supressTrigger) {
            return;
        }
        if (evt.getPropertyName().equalsIgnoreCase("date")) {

            // create an 'old value' DateRange (added PropertyChange event 9/5/19)
            DateRange oldVal = new DateRange(oldRange, startDate, endDate);

            // update the date / date range
            setEndDate(dateEnd.getDate());

            // now create a new value and fire property change
            DateRange newVal = new DateRange((RangeName) cboRange.getSelectedItem(), getStartDate(), getEndDate());
            firePropertyChange("DATE_RANGE", oldVal, newVal);
            // reset the Range to new value for next update
            oldRange = (RangeName) cboRange.getSelectedItem();

        }

    }//GEN-LAST:event_dateEndPropertyChange

    @Override
    public void setPromptValue(List<Date> value) {
        if (value == null) {
            this.promptValue = new ArrayList<Date>();
        } else if (value.size() == 2) {
            this.promptValue = value;
            setStartDate(promptValue.get(0));
            setEndDate(promptValue.get(1));
        } else {
            throw new IllegalArgumentException("List of Dates must have 2 values, startDate and endDate.");
        }
    }

    /**
     * List of dates.
     *
     * @return always returns list of 2 dates,
     */
    @Override
    public List<Date> getPromptValue() {
        if (promptValue == null) {
            promptValue = new ArrayList<Date>();
        } else {
            promptValue.clear();
        }
        promptValue.add(startDate);
        promptValue.add(endDate);
        return promptValue;
    }

    public void fillParameters(JasperReportImpl report) {
        report.setParameter(getStartDateParameterName(), getStartDate());
        report.setParameter(getEndDateParameterName(), getEndDate());
    }

    // the reason we created this - to implement start AND end dates!
    /**
     * @return the startDate
     */
    public Date getStartDate() {
        return startDate;
    }

    /**
     * @param startDate the startDate to set
     */
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
        this.dateStart.setDate(startDate);
        if (triggerCustom) {
            setRangeName(RangeName.CUSTOM);
        }
    }

    /**
     * @return the endDate
     */
    public Date getEndDate() {
        return endDate;
    }

    /**
     * @param endDate the endDate to set
     */
    public void setEndDate(Date endDate) {
        this.endDate = endDate;
        this.dateEnd.setDate(endDate);
        if (triggerCustom) {
            setRangeName(RangeName.CUSTOM);
        }
    }

    public void setRangeName(RangeName rName) {

        if (supressTrigger) {
            return;
        }

        triggerCustom = false;  // disable set(Start/End)Date calling custom
        supressTrigger = true;  // prevent looping when cboRange.setSelectedItem is called!

        cboRange.setSelectedItem(rName);

        switch (rName) {
            case TODAY:
                setStartDate(getToday());
                setEndDate(getToday());
                break;
            case YESTERDAY:
                setStartDate(getYesterday());
                setEndDate(getYesterday());
                break;
            case THIS_WEEK:
                setStartDate(getFirstDayOfThisWeek());
                setEndDate(getLastDayOfThisWeek());
                break;
            case THIS_WEEK_TO_DATE:
                setStartDate(getFirstDayOfThisWeek());
                setEndDate(getToday());
                break;
            case LAST_WEEK:
                setStartDate(getFirstDayOfLastWeek());
                setEndDate(getLastDayOfLastWeek());
                break;
            case LAST_WEEK_TO_DATE:
                setStartDate(getFirstDayOfLastWeek());
                setEndDate(getToday());
                break;
            case THIS_MONTH:
                setStartDate(getFirstDayOfThisMonth());
                setEndDate(getLastDayOfThisMonth());
                break;
            case THIS_MONTH_TO_DATE:
                setStartDate(getFirstDayOfThisMonth());
                setEndDate(getToday());
                break;
            case LAST_MONTH:
                setStartDate(getFirstDayOfLastMonth());
                setEndDate(getLastDayOfLastMonth());
                break;
            case LAST_MONTH_TO_DATE:
                setStartDate(getFirstDayOfLastMonth());
                setEndDate(getToday());
                break;
            case THIS_QUARTER:
                setStartDate(getFirstDayOfThisQuarter());
                setEndDate(getLastDayOfThisQuarter());
                break;
            case THIS_QUARTER_TO_DATE:
                setStartDate(getFirstDayOfThisQuarter());
                setEndDate(getToday());
                break;
            case LAST_QUARTER:
                setStartDate(getFirstDayOfLastQuarter());
                setEndDate(getLastDayOfLastQuarter());
                break;
            case LAST_QUARTER_TO_DATE:
                setStartDate(getFirstDayOfLastQuarter());
                setEndDate(getToday());
                break;
            case THIS_YEAR:
                setStartDate(getFirstDayOfThisYear());
                setEndDate(getLastDayOfThisYear());
                break;
            case THIS_YEAR_TO_DATE:
                setStartDate(getFirstDayOfThisYear());
                setEndDate(getToday());
                break;
            case LAST_YEAR:
                setStartDate(getFirstDayOfLastYear());
                setEndDate(getLastDayOfLastYear());
                break;
            case LAST_YEAR_TO_DATE:
                setStartDate(getFirstDayOfLastYear());
                setEndDate(getToday());
                break;
            case CUSTOM:
                // don't set any dates if Custom set
                break;
            case ALL:
                
                Calendar cal = new GregorianCalendar(1970, 1, 1);
                setStartDate(cal.getTime());
                
                cal = new GregorianCalendar();  //ERROR, WIDTH, ABORT);
                cal.add(Calendar.YEAR, 10);
                cal.set(Calendar.HOUR, 0);
                cal.set(Calendar.MINUTE, 0);
                cal.set(Calendar.SECOND, 0);
                cal.set(Calendar.MILLISECOND, 0);
                setEndDate(cal.getTime());
                break;
            default:
                System.out.println("should not get here!");
        }

        triggerCustom = true;
        supressTrigger = false;

    }

    /**
     * @return the startDateParameterName
     */
    public String getStartDateParameterName() {
        return startDateParameterName;
    }

    /**
     * @param startDateParameterName the startDateParameterName to set
     */
    public void setStartDateParameterName(String startDateParameterName) {
        this.startDateParameterName = startDateParameterName;
    }

    /**
     * @return the endDateParameterName
     */
    public String getEndDateParameterName() {
        return endDateParameterName;
    }

    /**
     * @param endDateParameterName the endDateParameterName to set
     */
    public void setEndDateParameterName(String endDateParameterName) {
        this.endDateParameterName = endDateParameterName;
    }

    // methods to retrive various dates
    public Date getToday() {
        return stripTime(GregorianCalendar.getInstance());
    }

    public Date getYesterday() {
        Calendar cal = GregorianCalendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return stripTime(cal);
    }

    public Date getFirstDayOfThisWeek() {
        return stripTime(calFirstDayThisWeek());
    }

    public Date getLastDayOfThisWeek() {
        Calendar cal = calFirstDayThisWeek();
        cal.add(Calendar.DAY_OF_MONTH, 6);
        return stripTime(cal);
    }

    public Date getFirstDayOfThisMonth() {
        Calendar cal = calLastDayThisMonth();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        return stripTime(cal);
    }

    public Date getLastDayOfThisMonth() {
        return stripTime(calLastDayThisMonth());
    }

    public Date getFirstDayOfThisQuarter() {
        Calendar cal = calLastDayThisQuarter();
        cal.add(Calendar.MONTH, -2);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        return stripTime(cal);
    }

    public Date getLastDayOfThisQuarter() {
        return stripTime(calLastDayThisQuarter());
    }

    public Date getFirstDayOfThisYear() {
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        return stripTime(cal);
    }

    public Date getLastDayOfThisYear() {
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.MONTH, Calendar.DECEMBER);
        cal.set(Calendar.DAY_OF_MONTH, 31);
        return stripTime(cal);
    }

    public Date getFirstDayOfLastWeek() {
        Calendar cal = GregorianCalendar.getInstance();
        int day = cal.get(Calendar.DAY_OF_WEEK);
        while (day != cal.getFirstDayOfWeek()) {
            cal.add(Calendar.DAY_OF_WEEK, -1);
            day--;
        }
        cal.add(Calendar.DAY_OF_MONTH, -7);
        return stripTime(cal);
    }

    public Date getLastDayOfLastWeek() {
        Calendar cal = GregorianCalendar.getInstance();
        int day = cal.get(Calendar.DAY_OF_WEEK);
        while (day != cal.getFirstDayOfWeek()) {
            cal.add(Calendar.DAY_OF_WEEK, -1);
            day--;
        }
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return stripTime(cal);
    }

    public Date getFirstDayOfLastMonth() {
        Calendar cal = calLastDayThisMonth();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.MONTH, -1);
        return stripTime(cal);
    }

    public Date getLastDayOfLastMonth() {
        Calendar cal = calLastDayThisMonth();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return stripTime(cal);
    }

    public Date getFirstDayOfLastQuarter() {
        Calendar cal = calLastDayThisQuarter();
        cal.add(Calendar.MONTH, -5);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        return stripTime(cal);
    }

    public Date getLastDayOfLastQuarter() {
        Calendar cal = calLastDayThisQuarter();
        cal.add(Calendar.MONTH, -3);
        return stripTime(cal);
    }

    public Date getFirstDayOfLastYear() {
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.YEAR, -1);
        return stripTime(cal);
    }

    public Date getLastDayOfLastYear() {
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return stripTime(cal);
    }

    private Calendar calFirstDayThisWeek() {
        Calendar cal = GregorianCalendar.getInstance();
        int day = cal.get(Calendar.DAY_OF_WEEK);
        while (day != cal.getFirstDayOfWeek()) {
            cal.add(Calendar.DAY_OF_WEEK, -1);
            day--;
        }
        return cal;
    }

    private Calendar calFirstDayThisMonth() {
        Calendar cal = GregorianCalendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, 1);
        return cal;
    }

    private Calendar calLastDayThisMonth() {
        Calendar cal = calFirstDayThisMonth();
        cal.add(Calendar.MONTH, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return cal;
    }

    private Calendar calLastDayThisQuarter() {
        Calendar cal = calFirstDayThisMonth();
        int m = cal.get(Calendar.MONTH) + 1;
        while (m % 3 != 0) {
            cal.add(Calendar.MONTH, 1);
            m++;
        }
        cal.add(Calendar.MONTH, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return cal;
    }

    /**
     * All get*DayOf*() functions call this at end to strip the time elements
     *
     * @param cal
     * @return
     */
    private Date stripTime(Calendar cal) {
        return new GregorianCalendar(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH)).getTime();
    }

    public static void main(String[] args) {
        DateRangePrompt dr = new DateRangePrompt();
        System.out.println("today = " + dr.getToday());
        System.out.println("yesterday = " + dr.getYesterday());
        System.out.println("this week = " + dr.getFirstDayOfThisWeek() + " - " + dr.getLastDayOfThisWeek());
        System.out.println("last week = " + dr.getFirstDayOfLastWeek() + " - " + dr.getLastDayOfLastWeek());
        System.out.println("this month = " + dr.getFirstDayOfThisMonth() + " - " + dr.getLastDayOfThisMonth());
        System.out.println("last month = " + dr.getFirstDayOfLastMonth() + " - " + dr.getLastDayOfLastMonth());
        System.out.println("this quarter = " + dr.getFirstDayOfThisQuarter() + " - " + dr.getLastDayOfThisQuarter());
        System.out.println("last quarter = " + dr.getFirstDayOfLastQuarter() + " - " + dr.getLastDayOfLastQuarter());
        System.out.println("this year = " + dr.getFirstDayOfThisYear() + " - " + dr.getLastDayOfThisYear());
        System.out.println("last year = " + dr.getFirstDayOfLastYear() + " - " + dr.getLastDayOfLastYear());

        for (RangeName rn : RangeName.values()) {
            System.out.println("Range: " + rn);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<RangeName> cboRange;
    private classicacctapp.ClassicAccDatePicker dateEnd;
    private classicacctapp.ClassicAccDatePicker dateStart;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblTo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refreshData() {
        setRangeName(RangeName.THIS_MONTH);
    }

    // the default methods of JRParameter - implemented those I thought we needed
    @Override
    public String getName() {
        return "P_DATE_RANGE";
    }


    @Override
    public void setDescription(String description) {
        if (lblDescription != null) {
            lblDescription.setText(description);
        }
        super.setDescription(description);
    }

    @Override
    public Class<?> getValueClass() {
        return java.util.Date.class;
    }

    @Override
    public String getValueClassName() {
        return java.util.Date.class.getName();
    }

    @Override
    public boolean isSystemDefined() {
        return false;
    }

    @Override
    public boolean isForPrompting() {
        return true;
    }

    @Override
    public ParameterEvaluationTimeEnum getEvaluationTime() {
        return ParameterEvaluationTimeEnum.EARLY;
    }

    @Override
    public JRExpression getDefaultValueExpression() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Class<?> getNestedType() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getNestedTypeName() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean hasProperties() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JRPropertiesMap getPropertiesMap() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JRPropertiesHolder getParentProperties() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * We don't hope clone gets called!
     *
     * @return
     */
    @Override
    public Object clone() {

        try {
            System.out.println(" %%% Nasty: clone() called on DateRange!");
            return super.clone();
        } catch (CloneNotSupportedException ex) {
            return null;
        }
    }

}
